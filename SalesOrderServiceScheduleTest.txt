@isTest
public class SalesOrderServiceScheduleTest {

    private class RestMock implements HttpCalloutMock{

        public HTTPResponse respond(HTTPRequest req){
            String fullJson = '{"salesOrder":{"salesOrderNumber": "187000252","statusSP": "Aprovado","soldToParty": "52168","approvalDateSP": "2023-01-20","approvalTimeSP": "10:22:45","approvalUsernameSP": "Nome do Aprovador","note": "teste isso é um teste"}}';
            String fullJsonError =  '{"response": {"status": "Error", "message": "A ordem de venda já está desbloqueada."}}';
                
            HTTPResponse res = new HTTPResponse();
            res.setHeader('Content-Type', 'application/json');
            res.setBody(fullJsonError);
            res.setStatusCode(200);
            return res;
        }
    }

    static testmethod void test(){
        Test.setMock(HttpCalloutMock.class, new RestMock());
        Test.startTest();
        Profile p = [SELECT Id FROM Profile WHERE Name='Gerente de Vendas'];

        Account conta = new Account();
        conta.Name = 'conta test';
        conta.EstrategiaComercial__c = 1.0;
        conta.Regi_o__c = 'Sudeste';
        conta.UF__c = 'SP';
        conta.Cidade__c = 'Sao Paulo';
        conta.Phone = '5591123344506';
        conta.CEP__c = '06343400';
        conta.CNPJ__c = '88781752000100';
        conta.Grau_de_utilizacao__c=10.0;  
        conta.CodigoContaSAP__c = 'abppT';      
        insert conta;

        User us = new User();
        us.LastName = 'souza';
        us.Alias = 'suza';
        us.Email = 'souza@gmail.com';
        us.Username = 'souza@acme.com';
        us.CommunityNickname = 'suz';
        us.NomeUsuarioExterno__c = 'Silva';
        us.TimeZoneSidKey = 'America/Sao_Paulo';
        us.LocaleSidKey = 'en_US';
        us.EmailEncodingKey = 'ISO-8859-1';
        us.ProfileId = p.Id;
        us.LanguageLocaleKey = 'en_US';
        Insert us;

        Case caso = new Case();
        caso.Status = 'Aprovado';
        caso.Origin = 'Web';
        caso.AccountId = conta.Id;
        caso.Organizacao_de_Vendas__c = 'CARB';
        caso.Subject = 'Teste';
        caso.Description = 'T';
		caso.OwnerId = us.Id;
		caso.Reason = 'Desconto/NF Complementar';
		caso.Tipo_de_Solicita_o__c = 'Desconto';
		caso.N_mero_do_Pedido__c = '1234';
        caso.NumeroPedidoSAP__c = '187000252';
        caso.IntegradoSucesso__c = true;
        caso.ErroIntegracao__c = false;
        caso.IntegrationDescription__c = 'Error ou sucesso';
        insert caso;

        List<Case> listBeforeIntegration = [SELECT Id, ErroIntegracao__c, Reason, Status FROM Case WHERE Id = :caso.Id];
    
        // Schedule the test jobs 
        String jobId1 = System.schedule('1testSalesOrderServiceSchedule',
        SalesOrderServiceSchedule.sch0, new SalesOrderServiceSchedule());
          
        String jobId2 = System.schedule('2testSalesOrderServiceSchedule',
        SalesOrderServiceSchedule.sch1, new SalesOrderServiceSchedule());
  
        String jobId3 = System.schedule('3testSalesOrderServiceSchedule',
        SalesOrderServiceSchedule.sch2, new SalesOrderServiceSchedule());
          
        String jobId4 = System.schedule('4testSalesOrderServiceSchedule',
        SalesOrderServiceSchedule.sch3, new SalesOrderServiceSchedule());

        CronTrigger ct1 = [SELECT Id, CronExpression, TimesTriggered, NextFireTime FROM CronTrigger WHERE id = :jobId1];
        CronTrigger ct2 = [SELECT Id, CronExpression, TimesTriggered, NextFireTime FROM CronTrigger WHERE id = :jobId2];
        CronTrigger ct3 = [SELECT Id, CronExpression, TimesTriggered, NextFireTime FROM CronTrigger WHERE id = :jobId3];
        CronTrigger ct4 = [SELECT Id, CronExpression, TimesTriggered, NextFireTime FROM CronTrigger WHERE id = :jobId4];

        //Run execute method of batch directely
        SalesOrderServiceBatch executar = new SalesOrderServiceBatch();
        executar.execute(null, listBeforeIntegration);

        //Create list of Solicitação de alteração de preços whith Erro Integração = true
        List<Case> lstAfterIntegration = [SELECT Id, ErroIntegracao__c FROM Case WHERE ErroIntegracao__c = true];

        if(lstAfterIntegration.isEmpty()){
            lstAfterIntegration = null;
        }
        Test.stopTest();
    }

    static testMethod void myTestMethod() {        
        test.startTest();
        SalesOrderServiceSchedule sh1 = new SalesOrderServiceSchedule();   
        String sch0 = '0 15 * * * ?';
        String sch1 = '0 15 * * * ?';
        String sch2 = '0 30 * * * ?';
        String sch3 = '0 45 * * * ?';
        String jobId = system.schedule('Teste de verificação 0', sch0, sh1);
        system.schedule('Teste de verificação 1', sch1, sh1);
        system.schedule('Teste de verificação 2', sch2, sh1);
        system.schedule('Teste de verificação 3', sch3, sh1);
        test.stopTest();
   }
}