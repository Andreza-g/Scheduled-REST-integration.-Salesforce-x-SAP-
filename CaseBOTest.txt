@isTest
public class CaseBOTest {
   
    @isTest
    public static void getInformationsTest(){

        Profile profileTest = [SELECT Id FROM Profile WHERE Name='Gerente de Vendas'];

        Account conta = new Account();
        conta.Name = 'conta test';
        conta.EstrategiaComercial__c = 1.0;
        conta.Regi_o__c = 'Sudeste';
        conta.UF__c = 'SP';
        conta.Cidade__c = 'Sao Paulo';
        conta.Phone = '5591123344506';
        conta.CEP__c = '06343400';
        conta.CNPJ__c = '88781752000100';
        conta.Grau_de_utilizacao__c=10.0;  
        conta.CodigoContaSAP__c = 'abppT';      
        insert conta;

        User us = new User();
        us.LastName = 'souza';
        us.Alias = 'suza';
        us.Email = 'souza@gmail.com';
        us.Username = 'souza@acme.com';
        us.CommunityNickname = 'suz';
        us.NomeUsuarioExterno__c = 'Silva';
        us.TimeZoneSidKey = 'America/Sao_Paulo';
        us.LocaleSidKey = 'en_US';
        us.EmailEncodingKey = 'ISO-8859-1';
        us.ProfileId = profileTest.Id;
        us.LanguageLocaleKey = 'en_US';
        Insert us;

        Case caso = new Case();
        caso.Status = 'Aprovado';
        caso.Origin = 'Web';
        caso.AccountId = conta.Id;
        caso.Organizacao_de_Vendas__c = 'CARB';
        caso.Subject = 'Teste';
        caso.Description = 'T';
		caso.OwnerId = us.Id;
		caso.Reason = 'Desconto/NF Complementar';
		caso.Tipo_de_Solicita_o__c = 'Desconto';
		caso.N_mero_do_Pedido__c = '1234';
        caso.NumeroPedidoSAP__c = '187000252';
        caso.IntegradoSucesso__c = true;
        caso.ErroIntegracao__c = false;
        caso.IntegrationDescription__c = 'Error ou sucesso';
        insert caso;
        caso.Status = 'Rejeitado';
        update caso;

        StaticResourceCalloutMock mockSuccess = new StaticResourceCalloutMock();
        mockSuccess.setStaticResource('SalesOrderMock');
        mockSuccess.setStatusCode(200);
        Test.setMock(HttpCalloutMock.class, mockSuccess);

        SalesOrderService.InfoModel infoModel = new SalesOrderService.InfoModel();
        infoModel.statusSF = 'Aprovado';
        infoModel.soldToParty = '52168';
        infoModel.salesOrderNumber = '187000252';
        infoModel.note = 'teste isso é um teste';
        infoModel.approvalUsernameSF = 'Nome do Aprovador';
        infoModel.approvalDateSF = '2023-01-20';
        infoModel.approvalTimeSF = '10:22:45'; 

        List<SalesOrderService.infoModel> infoModelList = new List<SalesOrderService.infoModel>{infoModel};
        SalesOrderService.InfoRequestModel InfoRequestModel = new SalesOrderService.InfoRequestModel();
        InfoRequestModel.salesOrder = infoModelList;

        List<Case> caseList = new List<Case>{caso};

        // StaticResourceCalloutMock mockError = new StaticResourceCalloutMock();
        // mockError.setStaticResource('SalesOrderMockError');
        // mockError.setStatusCode(500);
        // Test.setMock(HttpCalloutMock.class, mockError);


        List<LogErro__c> newLogErroList = new List<LogErro__c>();
        LogErro__c newLogErro = new LogErro__c();
        newLogErro.Case__c = caseList[0].Id;
        
        newLogErro.MensagemErro__c = 'Erro';              	
        insert newLogErro;
        newLogErroList.add(newLogErro);
        update newLogErroList; 
        caseList[0].IntegradoSucesso__c = false; 
        update caseList;  

        Test.setMock(HttpCalloutMock.class, new SalesOrderServiceMockSucess());
        Test.setMock(HttpCalloutMock.class, new SalesOrderServiceMockError());
        Test.StartTest();
        SalesOrderService.getInformations(InfoRequestModel); 
        CaseBO bo = new CaseBO();
        bo.getInformations(caseList);  
        bo.getInformations(caseList);       
        Test.StopTest();       
    }

    public class SalesOrderServiceMockSucess implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {

            HTTPResponse response = new HTTPResponse();
            response.setStatusCode(200);

            response.setHeader('Content-Type', 'application/json');
            response.setHeader('Authorization', 'Basic ' + '*************=');
            response.setBody('{"response": {"status": "Error", "message": "A ordem de venda já está desbloqueada."}}');
            response.setBody('{"response": {"status": "Sucesso", "message": "A ordem de venda já está desbloqueada."}}');

            return response;
        }        
    } 
    
    public class SalesOrderServiceMockError implements HttpCalloutMock {
        public HTTPResponse respond(HTTPRequest req) {

            HTTPResponse response = new HTTPResponse();
            response.setStatusCode(500);

            response.setHeader('Content-Type', 'application/json');
            response.setHeader('Authorization', 'Basic ' + '*********=');
            response.setBody('{"response": {"status": "Error", "message": "A ordem de venda já está desbloqueada."}}');

            return response;
        }        
    }  
   
}