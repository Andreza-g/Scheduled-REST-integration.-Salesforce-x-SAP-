public with sharing class CaseBO {

    public class CaseBOException extends Exception {}
    private static final CaseBO instancia = new CaseBO();

        public static CaseBO getInstance() {
            return instancia;
        }

    public CaseBO(){}

    public void getInformations(List<Case> newList){

        List<Case> caseList = [SELECT Id, Reason,Tipo_de_Solicita_o__c, Status, Account.CodigoContaSAP__c, NumeroPedidoSAP__c, Description, LastModifiedDate, LastModifiedBy.Name, IntegradoSucesso__c, ErroIntegracao__c FROM Case WHERE Id IN :newList];  
        String dateAndTime;
        String YearAndMounth;
        String Hours;
        Boolean token;
        
          	String developerName = 'AprovacaoDeCredito';
            IntegrationSAP__mdt integration = IntegrationSAP__mdt.getInstance(developerName);
            String toke = integration.Token__c;
            Case caseToUpdate = [SELECT Id, IntegradoSucesso__c,ErroIntegracao__c,IntegrationDescription__c, Status FROM Case WHERE Id IN :newList];

            if (integration != null && integration.Token__c != null) {
                token = true; 
            }else {
                token = false;
                List<LogErro__c> logsErro = new List<LogErro__c>();
            	LogErro__c newLogErro = new LogErro__c();
                caseToUpdate.IntegradoSucesso__c = false; 
            	caseToUpdate.ErroIntegracao__c = true;             
                newLogErro.IntegrationName__c = 'Integração Aprovação de Crédito - SAP';
                newLogErro.Case__c = caseToUpdate.Id;
                newLogErro.MensagemErro__c = 'Token vazio.';
                logsErro.add(newLogErro); 
                insert logsErro;
            }

        // System.debug('Entrou aqui #1');
        if((caseList[0].Status == 'Aprovado' || caseList[0].Status == 'Rejeitado') && caseList[0].Reason == 'Desconto/NF Complementar' && caseList[0].Tipo_de_Solicita_o__c == 'Desconto'){
            System.debug('A integração será chamada aqui.');           
          
            if(String.isBlank(caseList[0].Description)){
                throw new SalesOrderException('Descrição não preenchida.'); 
            }else
            if(caseList[0].LastModifiedDate != null){
                dateAndTime = String.valueOf(caseList[0].LastModifiedDate);
                YearAndMounth = dateAndTime.substring(0,10);
                Hours = dateAndTime.substring(11); 
            }                

            SalesOrderService.InfoRequestModel request = new SalesOrderService.InfoRequestModel();
            SalesOrderService.InfoModel infoModel = new SalesOrderService.InfoModel();
            infoModel.salesOrderNumber = caseList[0].NumeroPedidoSAP__c;
            infoModel.statusSF = caseList[0].Status;
            infoModel.soldToParty = caseList[0].Account.CodigoContaSAP__c;   
            infoModel.note = caseList[0].Description;
            infoModel.approvalUsernameSF = caseList[0].LastModifiedBy.Name ;
            infoModel.approvalDateSF = YearAndMounth;
            infoModel.approvalTimeSF = Hours;
 
            List<SalesOrderService.InfoModel> infoModelList = new List<SalesOrderService.InfoModel>();
            infoModelList.add(infoModel);
            request.salesOrder = infoModelList;
            System.debug('JSON*******' + infoModelList);

            List<String> registerToUpdateList = new List<String>{newList[0].Id};
            String registerToUpdateListSerialize = JSON.serialize(registerToUpdateList);
            
            if(System.isBatch()){
                getData(JSON.serialize(request), registerToUpdateListSerialize);
            }else{
                getInformationsFuture(JSON.serialize(request), registerToUpdateListSerialize);
            } 
        }  
        update caseToUpdate;
    }       

    @future(callout=true)
    public static void getInformationsFuture(String request, String registerToUpdateListSerialize){
        getData(request, registerToUpdateListSerialize);
    }

    public static SalesOrderService.InfoResponseModel getData(String request, String registerToUpdateListSerialize){
    
        List<String> registerToUpdateList = (List<String>) JSON.deserialize(registerToUpdateListSerialize, List<String>.class);

        SalesOrderService.InfoRequestModel requestData = new SalesOrderService.InfoRequestModel();
        requestData = (SalesOrderService.InfoRequestModel) JSON.deserialize(request, SalesOrderService.InfoRequestModel.class);
        SalesOrderService.InfoResponseModel returnedData = SalesOrderService.getInformations(requestData);
        System.debug('returnedData === ' + returnedData);      
        Case caseToUpdate = [SELECT Id, IntegradoSucesso__c,ErroIntegracao__c,IntegrationDescription__c, Status FROM Case WHERE Id IN :registerToUpdateList];
        List<LogErro__c> logsErro = new List<LogErro__c>();

        if(returnedData.success == true && returnedData.response.status != 'Error'){
            caseToUpdate.IntegradoSucesso__c = true;
            caseToUpdate.ErroIntegracao__c = false;
            caseToUpdate.IntegrationDescription__c = 'Status: ' + returnedData.response.status + ' - ' + 'Mensagem: ' + returnedData.response.message;
        }else if(returnedData.success == true && returnedData.response.status == 'Error'){
            caseToUpdate.IntegradoSucesso__c = false;
            caseToUpdate.ErroIntegracao__c = false;
            caseToUpdate.IntegrationDescription__c = 'Status: ' + returnedData.response.status + ' - ' + 'Mensagem: ' + returnedData.response.message;
            caseToUpdate.Status = 'Em andamento';        
        }else{
            caseToUpdate.IntegradoSucesso__c = false; 
            caseToUpdate.ErroIntegracao__c = true; 
            LogErro__c newLogErro = new LogErro__c();
            newLogErro.IntegrationName__c = 'Integração Aprovação de Crédito - SAP';
            newLogErro.Case__c = caseToUpdate.Id;
            newLogErro.MensagemErro__c = 'Status: ' + returnedData.response.status + ' - ' + 'Mensagem: ' + returnedData.response.message;
            newLogErro.Status__c = 'Error';                
            logsErro.add(newLogErro);                      
        }
        insert logsErro;
        update caseToUpdate;

        return returnedData;
    } 
     public virtual class SalesOrderException extends Exception{}
}